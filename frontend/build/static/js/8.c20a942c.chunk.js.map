{"version":3,"sources":["shared/components/UIElements/Modal.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Modal","props","Fragment","ErrorModal","onCancel","onClear","header","show","error","footer","onClick","Map","mapRef","useRef","center","zoom","useEffect","map","window","google","maps","current","Marker","position","ref","className","style","PlaceItem","useHttpClient","isLoading","sendRequest","auth","clearError","useContext","AuthContext","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","console","log","id","process","Authorization","token","onDelete","address","contentClass","footerClass","Button","coordinates","inverse","danger","Card","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","useParams","responseData","places","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/8.c20a942c.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport Backdrop from './Backdrop';\nimport Card from './Card';\nimport './Modal.css';\n\n\nconst ModalOverlay = props => {\n  // console.log('model overlay props', props)\n  const content = (\n    <div className={`modal ${props.className}`} style={props.style}>\n        <header className={`modal__header ${props.headerClass}`}>\n          <h2>{props.header}</h2>\n    <h2>a fucking error has occured!</h2>\n        </header>\n        <form\n          onSubmit={\n            props.onSubmit ? props.onSubmit : event => event.preventDefault()\n          }\n        >\n          <div className={`modal__content ${props.contentClass}`}>\n            {props.children}\n          </div>\n          <footer className={`modal__footer ${props.footerClass}`}>\n            {props.footer}\n          </footer>\n        </form>\n      </div>\n  );\n  return ReactDOM.createPortal(content, document.getElementById('modal-hook'));\n};\n\nconst Modal = props => {\n  return (\n    <React.Fragment>\n      {/* {props.show && <Backdrop onClick={props.onCancel} />} */}\n      {/* <Card> */}\n        {/* <h4>a fucking modal error has occured!</h4> */}\n      {/* </Card> */}\n      {/* <CSSTransition */}\n        {/* in={props.show} */}\n        {/* mountOnEnter */}\n        {/* unmountOnExit */}\n        {/* timeout={200} */}\n        {/* classNames=\"modal\" */}\n      {/* > */}\n        {/* <ModalOverlay {...props} /> */}\n      {/* </CSSTransition> */}\n    </React.Fragment>\n  );\n};\n\nexport default Modal;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React, { useRef, useEffect } from 'react';\n\nimport './Map.css';\n\nconst Map = props => {\n  const mapRef = useRef();\n  \n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom\n    });\n  \n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);  \n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n\nexport default Map;\n","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport {AuthContext} from '../../shared/context/auth-context'\nimport { useHttpClient } from '../../shared/hooks/http-hook'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\n// import ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport './PlaceItem.css';\n\nconst PlaceItem = props => {\n  const { isLoading, error, sendRequest, clearError } = useHttpClient()\n  //context\n  const auth = useContext(AuthContext)\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n  const openMapHandler = () => setShowMap(true);\n  const closeMapHandler = () => setShowMap(false);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n  // we are sure for deleting\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    console.log('DELETING...', `${props.id}`);\n    // places id from props.id\n    try {\n      await sendRequest(process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`,\n        'DELETE',\n        null,\n        {\n          Authorization: 'Bearer ' + auth.token\n        }\n      )\n      // we call a function delete from the places-id in PlacesList-obj (onDeletePlace()) with the id\n      props.onDelete(props.id)\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      {/* <ErrorModal error={error} onClear={clearError} /> */}\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={showDeleteWarningHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone thereafter.\n        </p>\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay />}\n          <div className=\"place-item__image\">\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            \n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && \n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            }\n            {auth.userId === props.creatorId && \n              <Button danger onClick={confirmDeleteHandler}>\n                DELETE\n              </Button>\n            }\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport PlaceItem from './PlaceItem';\nimport Button from '../../shared/components/FormElements/Button';\nimport './PlaceList.css';\n\nconst PlaceList = props => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ul className=\"place-list\">\n      {props.items.map(place => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useHttpClient } from '../../shared/hooks/http-hook'\nimport PlaceList from '../components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal'\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner'\n\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState()\n  const {isLoading, error, sendRequest, clearError } = useHttpClient()\n\n  const userId = useParams().userId;\n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n          )\n        setLoadedPlaces(responseData.places)\n      } catch(err) {\n        console.log(err);\n      }\n    }\n    fetchPlaces()\n  }, [sendRequest, userId])\n  \n  const placeDeleteHandler = (deletedPlaceId) => {\n    // return a new array of setLoadedPlaces with filtered out the current deletedPlace\n    setLoadedPlaces(prevPlaces => prevPlaces.filter(places => places.id !== deletedPlaceId))\n  }\n\n  // const loadedPlaces = DUMMY_PLACES.filter(place => place.creator === userId);\n  return (\n    <>\n      {/* <ErrorModal error={error} onClear={clearError} /> */}\n      {isLoading && (\n        <LoadingSpinner asOverlay />\n     )}\n      {!isLoading && loadedPlaces &&\n        <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler} />\n      }\n    </>\n  )\n};\n\nexport default UserPlaces;\n"],"sourceRoot":""}