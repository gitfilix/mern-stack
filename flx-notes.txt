FLX notes - MERN stack training by schwarzmueller
--------------------------------------------------

frontend: npm start

http://localhost:3000/


backend: npm start
http://localhost:5000/products


best practice make a copy, (...rest ) edit copy, push back 

context: 
-------------
kind of a event-handler provider
for all the components which are interested (aka have some listeners) on it

root component App.js
<AuthContext.Provider value={} >


// useEffect and async:
const Users = () => {
  // load only once: -> useEffect Hook here with an empty []:
  useEffect(()=> {
    // create iffee: useEffect dont like async/ await functions: therfore create an iffee 
    // and do the async thingy here while awaiting on the response 
    const sendRequest = async () => {
      const response = await fetch('http://localhost:5000/api/users')
      const responseData = await response.json()
    }
    sendRequest()
  }, [])

  return <UsersList items={USERS} />;
}


// useRef: stores data and survives render-cycles
// will prevent function from re-initialize 
useRef([])

Mongoose tricks
----------------------

getters: true object -> converts _id to id
res.json({ place: place.toObject( { getters: true }) }) // place object converted to normal js-object. getters: true = _id :id

Schema: // unique propperty: creates a index for email, that speeds up quering process
-> you need mongoose-validator package for that

email: { type: String, reqired: true, unique: true }


foreign key in Schema (place.js) 
// creator: this should correspond to a User.Id provided by mongo.DB 
// ref: 'User': connection to other collection called User (foreign key)
creator: { type: mongoose.Types.ObjectId, required: true, ref: 'User'}

populate method: search in a foreign collection with populte as the key
// 1. find it from Place with populate WHERE user is creator 

place = await Place.findById(placeId).populate('creator')